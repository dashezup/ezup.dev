#+TITLE: OpenPGP Key Generation and Usage
#+AUTHOR: Dash Eclipse
#+DATE: [2020-06-30 Tue]
#+KEYWORDS: openpgp, pgp, gnupg, gpg, subkey
#+DESCRIPTION: How do I generate OpenPGP keys and use it
#+OPTIONS: toc:nil

In this article I'm gonna explain how do I generate and use  OpenPGP keys.

* Install GnuPG
  :PROPERTIES:
  :ID:       22D75389-43AB-49A4-B998-B48AF2365397
  :PUBDATE:  <2020-07-02 Thu 21:30>
  :END:
  On macOS you can use brew to install GnuPG ~brew install gnupg~, you will also need ~pinentry-mac~ package if you are going to use it with GUI programs such like Thunderbird with Eng

* OpenPGP key generation
  :PROPERTIES:
  :ID:       890C9B02-7790-4FAC-80B7-E36F5B3058D0
  :PUBDATE:  <2020-07-02 Thu 21:30>
  :END:
  Beside ~gpg --full-generate-key~, you can also create a key with gpg in batch mode[fn:1].
  #+BEGIN_SRC sh
    cat >first-last.txt <<EOF
    %echo Generating a basic OpenPGP key
    Key-Type: RSA
    Key-Length: 4096
    Key-Usage: cert
    #Subkey-Type: RSA
    #Subkey-Length: 4096
    Name-Real: First Last
    #Name-Comment:
    Name-Email: user@domain.tld
    Expire-Date: 30y
    Passphrase: password
    %commit
    %echo done
    EOF
  #+END_SRC
  Create a key in an ephemeral home directory
  #+BEGIN_SRC sh
    mkdir -m700 .gnupg
    ## Set the environment variable
    ## or pass --homedir .gnupg as an argument
    export GNUPGHOME=".gnupg"
    gpg --batch --generate-key first-last.txt
  #+END_SRC

* Use subkeys
  :PROPERTIES:
  :ID:       E5DD933D-DF29-4D17-A703-4306E7F28349
  :PUBDATE:  <2020-07-02 Thu 21:30>
  :END:
  I use encryption and signing subkeys instead of just use one key for everything, because it's safer when you keep your master key elsewhere and use different keys for different purposes. Debian also recommend to use subkeys.[fn:2]
  #+BEGIN_SRC sh
    ## adduid, (trust, 5,) save
    gpg --edit-key user@domain.tld
    ## Get keygrip
    gpg --with-keygrip --list-key <key-id>
    ## Export and Import the key to the GPG homedir
    ## where you are gonna use the key,
    ## remove the master key from there
    ## and change the password
    rm .gnupg/private-keys-v1.d/<keygrip>.key
    gpg --edit-key <key-id> passwd
  #+END_SRC
** Thunderbird and Enigmail
   I use Thunderbird with Enigmail to send and receive PGP encrypted emails, you can follow [[https://ssd.eff.org/en/module/how-use-pgp-mac-os-x][the guide by EFF SSD]] to set it up. Note you need to install ~pinentry-mac~ the package to use GPG with such GUI programs.
   #+BEGIN_SRC sh
     brew install pinentry-mac
     echo 'pinentry-program /usr/local/bin/pinentry-mac' > ~/.gnupg/gpg-agent.conf
   #+END_SRC
** Git
   #+BEGIN_SRC sh
     git config --global gpg.program $(which gpg)
     git config --global user.name 'First Last'
     git config --global user.email 'user@domain.tld'
     git config --global user.signingkey <signing_subkey_id>
     git config --global commit.gpgsign true
   #+END_SRC
   In case you don't want to sign commits for specific repo, just run ~git config commit.gpgsign false~ in the repo directory.
** pass (the standard unix password manager)
   I use [[https://www.passwordstore.org/][pass]] to manage my passwords, with a different key. pass store passwords in a git repo, you can also store the ~$GNUPGHOME~ in a git repo or just in the same repo.
   I have some config like this in my zsh config ~~/.zshrc.local~
   #+BEGIN_SRC sh
     PASSWORD_STORE_DIR="$HOME/passwordstore"
     alias pass="GNUPGHOME=\"$HOME/passwordstore/.gnupg\" PASSWORD_STORE_DIR=\"$HOME/passwordstore\" pass"
   #+END_SRC
* Footnotes

[fn:1] [[https://www.gnupg.org/documentation//manuals/gnupg/Unattended-GPG-key-generation.html][4.5.4 Unattended key generation | The GNU Privacy Guard Manual]]
[fn:2] [[https://wiki.debian.org/Subkeys][Subkeys | Debian Wiki]]
